{"version":3,"sources":["hooks/useAuthRoles.tsx","hooks/useGetQuestions.tsx","routes/LoginRoute.tsx","components/Header.tsx","hooks/usePostAnswers.tsx","components/AnswerForm.tsx","hooks/useEditAnswer.tsx","components/AnswerEdit.tsx","components/AnswerCard.tsx","components/QuestionCard.tsx","hooks/usePostQuestions.tsx","components/QuestionForm.tsx","routes/AdminHome.tsx","routes/UserHome.tsx","routes/RoleBasedRoute.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["constate","loginApiFn","body","a","axios","post","response","data","user","useLocalStorageValue","key","defaultValue","JSON","stringify","isLoggedIn","undefined","localState","setLocalState","mutation","useMutation","onSuccess","parsedState","parse","handleLogout","AuthProvider","useAuthService","fetchQuestionApi","get","res","useQuery","QuestionsProvider","useQuestions","schema","yup","username","required","password","LoginRoute","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","mutateAsync","navigate","useNavigate","handleLogin","replace","console","log","role","to","Container","Center","sx","minHeight","fontSize","Card","shadow","padding","onSubmit","TextInput","placeholder","label","error","message","Space","h","Button","variant","fullWidth","type","Header","Group","position","name","color","onClick","usePostAnswers","queryClient","useQueryClient","postAnswerApi","questionId","mutationKey","variables","invalidateQueries","text","min","AnswerForm","question","isLoading","reset","values","id","submittedById","radius","style","LoadingOverlay","visible","Textarea","disabled","marginBottom","display","justifyContent","loading","useEditAnswer","editAnswerApi","put","AnswerEdit","answer","toggleEditMode","defaultValues","compact","AnswerCard","ans","theme","useMantineTheme","useState","editMode","setEditMode","prev","withBorder","margin","spacing","xs","backgroundColor","colors","gray","Text","component","submittedBy","size","uppercase","dayjs","submittedAt","toNow","extend","relativeTime","QuestionCard","lg","weight","createdAt","Divider","my","answers","length","labelPosition","map","Section","usePostQuestions","postQuestionApi","QuestionForm","creatorId","AdminHome","Loader","questions","q","UserHome","RoleBasedRoute","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","StrictMode","client","MantineProvider","fontFamily","withNormalizeCSS","withGlobalStyles","document","getElementById"],"mappings":"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","file":"static/js/main.2f2f0f32.chunk.js","sourcesContent":["import constate from \"constate\";\nimport axios from \"axios\";\nimport { useMutation } from \"react-query\";\nimport { useLocalStorageValue } from \"@mantine/hooks\";\nimport { IUserObject } from \"../interfaces/user\";\nimport { ILoginFormInput } from \"../routes/LoginRoute\";\n\ninterface ILoginSuccess {\n  user: IUserObject;\n}\n\n// interface IAuthState extends ILoginSuccess {\n//   isLoggedIn: boolean;\n// }\n\nconst useAuthRoles = () => {\n  const loginApiFn = async (body: ILoginFormInput) => {\n    const response = await axios.post<ILoginSuccess>(\"/api/login\", body);\n\n    return response?.data?.user;\n  };\n\n  const [localState, setLocalState] = useLocalStorageValue({\n    key: \"rqt-auth-state\",\n    defaultValue: JSON.stringify({\n      isLoggedIn: false,\n      user: undefined,\n    }),\n  });\n\n  const mutation = useMutation<IUserObject, any, ILoginFormInput, any>(\n    loginApiFn,\n    {\n      onSuccess: (data) => {\n        setLocalState(JSON.stringify({ isLoggedIn: true, user: data }));\n      },\n    }\n  );\n\n  const parsedState = JSON.parse(localState);\n  const isLoggedIn: boolean = parsedState?.isLoggedIn;\n  const user: IUserObject = parsedState?.user;\n\n  const handleLogout = () => {\n    setLocalState(\n      JSON.stringify({\n        isLoggedIn: false,\n        user: undefined,\n      })\n    );\n  };\n\n  return {\n    isLoggedIn,\n    user,\n    handleLogout,\n    ...mutation,\n  };\n};\n\nexport const [AuthProvider, useAuthService] = constate(useAuthRoles);\n","import axios from \"axios\";\nimport constate from \"constate\";\nimport { useQuery } from \"react-query\";\nimport { IQuestion } from \"../interfaces/question\";\n\nconst useGetQuestions = () => {\n  const fetchQuestionApi = async () => {\n    const res = await axios.get<{ questions: Array<IQuestion> }>(\n      \"/api/question\"\n    );\n\n    return res.data;\n  };\n  return useQuery(\"questions\", fetchQuestionApi);\n};\n\nexport const [QuestionsProvider, useQuestions] = constate(useGetQuestions);\n","import {\n  Button,\n  Card,\n  Center,\n  Container,\n  Space,\n  TextInput,\n} from \"@mantine/core\";\n\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport { Navigate, useNavigate } from \"react-router-dom\";\n\nexport interface ILoginFormInput {\n  username: string;\n  password: string;\n}\n\nconst schema = yup\n  .object({\n    username: yup.string().required(\"Username is required\"),\n    password: yup.string().required(\"Password is required\"),\n  })\n  .required();\n\nconst LoginRoute = () => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<ILoginFormInput>({\n    resolver: yupResolver(schema),\n  });\n  const { mutateAsync, isLoggedIn, user } = useAuthService();\n\n  const navigate = useNavigate();\n\n  const handleLogin: SubmitHandler<ILoginFormInput> = async (\n    data: ILoginFormInput\n  ) => {\n    try {\n      await mutateAsync(data);\n      navigate(\"/\", { replace: true });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  if (isLoggedIn && user?.role) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Container>\n      <Center sx={{ minHeight: \"100vh\", fontSize: \"1.4rem\" }}>\n        <Card shadow=\"sm\" padding=\"lg\">\n          <form onSubmit={handleSubmit(handleLogin)}>\n            <TextInput\n              placeholder=\"Your username\"\n              label=\"Username\"\n              required\n              error={errors?.username?.message}\n              {...register(\"username\", { required: true })}\n            />\n            <Space h=\"md\" />\n            <TextInput\n              placeholder=\"Your password\"\n              label=\"Password\"\n              required\n              error={errors?.password?.message}\n              {...register(\"password\", { required: true })}\n            />\n            <Space h=\"md\" />\n            <Button variant=\"filled\" fullWidth type=\"submit\">\n              Submit\n            </Button>\n          </form>\n        </Card>\n      </Center>\n    </Container>\n  );\n};\n\nexport default LoginRoute;\n","import { Button, Group } from \"@mantine/core\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\n\nconst Header = () => {\n  const { user, handleLogout } = useAuthService();\n  return (\n    <Group position=\"apart\">\n      <h1>Welcome {user?.name}</h1>\n      <Button color=\"red\" variant=\"outline\" onClick={handleLogout}>\n        Logout\n      </Button>\n    </Group>\n  );\n};\n\nexport default Header;\n","import axios from \"axios\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { IAnswer } from \"../interfaces/answer\";\n// import { IQuestion } from \"../interfaces/question\";\n\nconst usePostAnswers = () => {\n  const queryClient = useQueryClient();\n  const postAnswerApi = async (data: Partial<IAnswer>) => {\n    const res = await axios.post<IAnswer>(\n      `/api/question/${data?.questionId}/answer`,\n      data\n    );\n\n    return res.data;\n  };\n\n  return useMutation(postAnswerApi, {\n    mutationKey: \"answer\",\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n  });\n};\n\nexport default usePostAnswers;\n","import { Button, Card, LoadingOverlay, Textarea } from \"@mantine/core\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport usePostAnswers from \"../hooks/usePostAnswers\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { IQuestion } from \"../interfaces/question\";\n\ninterface IAnswerInput {\n  text: string;\n}\n\ninterface IAnswerFormProp {\n  question: IQuestion;\n}\n\nconst schema = yup\n  .object({\n    text: yup\n      .string()\n      .required(\"Answer cannot be empty\")\n      .min(3, \"Answer should be atleast 3 characters long\"),\n  })\n  .required();\n\nconst AnswerForm: React.FC<IAnswerFormProp> = ({ question }) => {\n  // const theme = useMantineTheme();\n  const { mutateAsync, isLoading } = usePostAnswers();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<IAnswerInput>({\n    resolver: yupResolver(schema),\n  });\n\n  const { user } = useAuthService();\n\n  const onSubmit: SubmitHandler<IAnswerInput> = async (values) => {\n    await mutateAsync({\n      ...values,\n      questionId: question?.id,\n      submittedById: user?.id,\n    });\n    reset();\n  };\n  return (\n    <Card radius=\"lg\" padding=\"md\">\n      <form onSubmit={handleSubmit(onSubmit)} style={{ position: \"relative\" }}>\n        <LoadingOverlay visible={isLoading} />\n        <Textarea\n          disabled={isLoading}\n          placeholder=\"Post a Answer\"\n          label=\"Type your Answer\"\n          required\n          error={errors?.text?.message}\n          sx={{ marginBottom: 16 }}\n          {...register(\"text\")}\n        />\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button loading={isLoading} disabled={isLoading} type=\"submit\">\n            Submit Answer\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default AnswerForm;\n","import axios from \"axios\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { IAnswer } from \"../interfaces/answer\";\n\nconst useEditAnswer = () => {\n  const queryClient = useQueryClient();\n  const editAnswerApi = async (data: Partial<IAnswer>) => {\n    const res = await axios.put<IAnswer>(`/api/answer/${data?.id}`, data);\n\n    return res.data;\n  };\n\n  return useMutation(editAnswerApi, {\n    mutationKey: \"answer-edit\",\n    onSuccess: (data, variables) => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n  });\n};\n\nexport default useEditAnswer;\n","import { Button, Textarea } from \"@mantine/core\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\n\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\nimport { IAnswer } from \"../interfaces/answer\";\nimport useEditAnswer from \"../hooks/useEditAnswer\";\n\ninterface IAnswerInput {\n  text: string;\n}\n\ninterface IAnswerEditProp {\n  answer: IAnswer;\n  toggleEditMode: () => void;\n}\n\nconst schema = yup\n  .object({\n    text: yup\n      .string()\n      .required(\"Answer cannot be empty\")\n      .min(3, \"Answer should be atleast 3 characters long\"),\n  })\n  .required();\n\nconst AnswerEdit: React.FC<IAnswerEditProp> = ({ answer, toggleEditMode }) => {\n  const { mutateAsync, isLoading } = useEditAnswer();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<IAnswerInput>({\n    resolver: yupResolver(schema),\n    defaultValues: {\n      text: answer?.text,\n    },\n  });\n\n  const onSubmit: SubmitHandler<IAnswerInput> = async (values) => {\n    await mutateAsync({\n      ...values,\n      id: answer?.id,\n    });\n    reset();\n    toggleEditMode();\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} style={{ position: \"relative\" }}>\n      <Textarea\n        disabled={isLoading}\n        placeholder=\"Post a Answer\"\n        label=\"Type your Answer\"\n        required\n        defaultValue={answer?.text}\n        error={errors?.text?.message}\n        sx={{ marginBottom: 16 }}\n        {...register(\"text\")}\n      />\n      <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n        <Button compact loading={isLoading} disabled={isLoading} type=\"submit\">\n          Update Answer\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nexport default AnswerEdit;\n","import { Button, Card, Group, Text, useMantineTheme } from \"@mantine/core\";\nimport dayjs from \"dayjs\";\nimport React, { useState } from \"react\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport { IAnswer } from \"../interfaces/answer\";\nimport AnswerEdit from \"./AnswerEdit\";\n\ninterface IAnswerCardProp {\n  ans: IAnswer;\n}\n\nconst AnswerCard: React.FC<IAnswerCardProp> = ({ ans }) => {\n  const theme = useMantineTheme();\n  const { user } = useAuthService();\n  const [editMode, setEditMode] = useState(false);\n\n  const toggleEditMode = () => {\n    setEditMode((prev) => !prev);\n  };\n  return (\n    <Card\n      withBorder\n      key={ans?.id}\n      padding=\"md\"\n      sx={{\n        margin: theme.spacing.xs,\n        backgroundColor: theme.colors.gray[0],\n      }}\n    >\n      <Group position=\"apart\" style={{ marginBottom: theme.spacing.xs }}>\n        <Text color=\"blue\">\n          Answered by:{\" \"}\n          <Text component=\"strong\" color=\"blue\">\n            {ans?.submittedBy?.name}\n          </Text>\n        </Text>\n        {user?.id === ans?.submittedBy?.id && !editMode && (\n          <Button\n            variant=\"outline\"\n            size=\"xs\"\n            color=\"orange\"\n            compact\n            uppercase\n            onClick={toggleEditMode}\n          >\n            Edit\n          </Button>\n        )}\n      </Group>\n      {editMode ? (\n        <AnswerEdit answer={ans} toggleEditMode={toggleEditMode} />\n      ) : (\n        <Text>{ans.text}</Text>\n      )}\n\n      <Text size=\"xs\">{dayjs(ans.submittedAt)?.toNow(true)} ago</Text>\n    </Card>\n  );\n};\n\nexport default AnswerCard;\n","import { Card, Divider, Group, Text, useMantineTheme } from \"@mantine/core\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { IQuestion } from \"../interfaces/question\";\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport AnswerForm from \"./AnswerForm\";\nimport AnswerCard from \"./AnswerCard\";\n\ndayjs.extend(relativeTime);\n\ninterface IQuestionCardProps {\n  question: IQuestion;\n}\n\nconst QuestionCard: React.FC<IQuestionCardProps> = ({ question }) => {\n  const theme = useMantineTheme();\n  const { user } = useAuthService();\n  return (\n    <Card\n      padding=\"lg\"\n      radius=\"lg\"\n      shadow=\"md\"\n      sx={{ marginBottom: theme.spacing.lg }}\n    >\n      <Group position=\"apart\" style={{ marginBottom: theme.spacing.xs }}>\n        <Text size=\"xl\" weight={700}>\n          Q: {question.text}\n        </Text>\n        <Text size=\"xs\">{dayjs(question.createdAt)?.toNow(true)} ago</Text>\n      </Group>\n\n      <Divider\n        my=\"sm\"\n        label={\n          question?.answers?.length\n            ? `${question?.answers?.length} answers posted`\n            : \"No answer posted yet!\"\n        }\n        labelPosition=\"center\"\n      />\n\n      {question?.answers?.map((ans) => (\n        <Card.Section key={ans.id}>\n          <AnswerCard ans={ans} />\n        </Card.Section>\n      ))}\n      {user?.role === \"USER\" && (\n        <Card.Section>\n          <AnswerForm question={question} />\n        </Card.Section>\n      )}\n    </Card>\n  );\n};\n\nexport default QuestionCard;\n","import axios from \"axios\";\nimport { useMutation, useQueryClient } from \"react-query\";\nimport { IQuestion } from \"../interfaces/question\";\n\nconst usePostQuestions = () => {\n  const queryClient = useQueryClient();\n  const postQuestionApi = async (data: Partial<IQuestion>) => {\n    const res = await axios.post<IQuestion>(\"/api/question\", data);\n\n    return res.data;\n  };\n\n  return useMutation(postQuestionApi, {\n    mutationKey: \"question\",\n    onSuccess: () => {\n      queryClient.invalidateQueries(\"questions\");\n    },\n  });\n};\n\nexport default usePostQuestions;\n","import {\n  Button,\n  Card,\n  LoadingOverlay,\n  Textarea,\n  useMantineTheme,\n} from \"@mantine/core\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport usePostQuestions from \"../hooks/usePostQuestions\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\ninterface IQuestionInput {\n  text: string;\n}\n\nconst schema = yup\n  .object({\n    text: yup\n      .string()\n      .required(\"Question cannot be empty\")\n      .min(10, \"Question should be atleast 10 characters long\"),\n  })\n  .required();\n\nconst QuestionForm = () => {\n  const theme = useMantineTheme();\n  const { mutateAsync, isLoading } = usePostQuestions();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<IQuestionInput>({\n    resolver: yupResolver(schema),\n  });\n\n  const { user } = useAuthService();\n\n  const onSubmit: SubmitHandler<IQuestionInput> = async (values) => {\n    await mutateAsync({ ...values, creatorId: user?.id });\n    reset();\n  };\n  return (\n    <Card radius=\"lg\" shadow=\"md\" sx={{ marginBottom: theme.spacing.lg }}>\n      <form onSubmit={handleSubmit(onSubmit)} style={{ position: \"relative\" }}>\n        <LoadingOverlay visible={isLoading} />\n        <Textarea\n          disabled={isLoading}\n          placeholder=\"Write your question...\"\n          label=\"Post a question\"\n          required\n          error={errors?.text?.message}\n          sx={{ marginBottom: 16 }}\n          {...register(\"text\")}\n        />\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button loading={isLoading} disabled={isLoading} type=\"submit\">\n            Post Question\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuestionForm;\n","import { Center, Container, Loader } from \"@mantine/core\";\nimport Header from \"../components/Header\";\nimport QuestionCard from \"../components/QuestionCard\";\nimport QuestionForm from \"../components/QuestionForm\";\n\nimport { useQuestions } from \"../hooks/useGetQuestions\";\n\nconst AdminHome = () => {\n  const { data, isLoading } = useQuestions();\n\n  return (\n    <Container>\n      <Header />\n      <QuestionForm />\n      {isLoading && (\n        <Center>\n          <Loader variant=\"bars\" />\n        </Center>\n      )}\n\n      {data?.questions?.map((q) => (\n        <QuestionCard key={q.id} question={q} />\n      ))}\n    </Container>\n  );\n};\n\nexport default AdminHome;\n","import { Container, Center, Loader } from \"@mantine/core\";\nimport Header from \"../components/Header\";\nimport QuestionCard from \"../components/QuestionCard\";\n// import QuestionForm from \"../components/QuestionForm\";\nimport { useQuestions } from \"../hooks/useGetQuestions\";\n\nconst UserHome = () => {\n  const { data, isLoading } = useQuestions();\n  return (\n    <Container>\n      <Header />\n\n      {isLoading && (\n        <Center>\n          <Loader variant=\"bars\" />\n        </Center>\n      )}\n\n      {data?.questions?.map((q) => (\n        <QuestionCard key={q.id} question={q} />\n      ))}\n    </Container>\n  );\n};\n\nexport default UserHome;\n","import React from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport { useAuthService } from \"../hooks/useAuthRoles\";\nimport AdminHome from \"./AdminHome\";\nimport UserHome from \"./UserHome\";\n\nconst RoleBasedRoute: React.FC<any> = () => {\n  const { user, isLoggedIn } = useAuthService();\n\n  if (!isLoggedIn && !user?.role) {\n    return <Navigate to=\"/login\" />;\n  }\n\n  if (user?.role === \"ADMIN\") {\n    return <AdminHome />;\n  }\n\n  if (user?.role === \"USER\") {\n    return <UserHome />;\n  }\n\n  return null;\n};\n\nexport default RoleBasedRoute;\n","import { Route, Routes } from \"react-router-dom\";\nimport { AuthProvider } from \"./hooks/useAuthRoles\";\nimport { QuestionsProvider } from \"./hooks/useGetQuestions\";\nimport LoginRoute from \"./routes/LoginRoute\";\nimport RoleBasedRoute from \"./routes/RoleBasedRoute\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <QuestionsProvider>\n        <div\n          style={{ minHeight: \"100vh\", backgroundColor: \"rgb(248, 249, 250)\" }}\n        >\n          <Routes>\n            <Route path=\"/login\" element={<LoginRoute />} />\n            <Route path=\"/\" element={<RoleBasedRoute />} />\n          </Routes>\n        </div>\n      </QuestionsProvider>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { MantineProvider } from \"@mantine/core\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { makeServer } from \"./server\";\n\nif (process.env.NODE_ENV === \"development\") {\n  makeServer({ environment: \"development\" });\n}\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <QueryClientProvider client={queryClient}>\n        <MantineProvider\n          theme={{ fontFamily: \"Roboto, sans-serif\" }}\n          withNormalizeCSS\n          withGlobalStyles\n        >\n          <App />\n        </MantineProvider>\n      </QueryClientProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}